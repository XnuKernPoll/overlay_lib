sealed trait CMD
case object JOIN extends CMD
case object LEAVE extends CMD
case object LIST extends CMD

object CMD {

  def asINT(op: OP) = op match {
    case JOIN => 0; case LEAVE => 1; case LIST => 2 
  }


  def fromINT(i: Int) = int match {
    case 0 => JOIN; case 1 => LEAVE; case 2 => LIST 
  }

  def codec: Codec[CMD] = uint8.xmap[CMD](i => CMD.fromINT(i), cmd => CMD.asINT(cmd) )   

}

case class MSG(cmd: CMD, node: Node)
object MSG { def codec: Codec[MSG] = (CMD.codec :: Node.codec ).as[MSG] }


